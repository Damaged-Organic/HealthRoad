<?php
// src/AppBundle/Entity/Settings/SettingsDecimal.php
namespace AppBundle\Entity\Settings;

use Symfony\Component\Validator\Constraints as Assert,
    Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

use Doctrine\ORM\Mapping as ORM;

use AppBundle\Entity\Utility\Traits\DoctrineMapping\IdMapperTrait,
    AppBundle\Validator\Constraints as CustomAssert;

/**
 * @ORM\Table(name="settings_decimal")
 * @ORM\Entity(repositoryClass="AppBundle\Entity\Settings\Repository\SettingsDecimalRepository")
 *
 * @UniqueEntity(fields="name", message="settings_decimal.name.unique")
 * @UniqueEntity(fields="key", message="settings_decimal.key.unique")
 */
class SettingsDecimal
{
    use IdMapperTrait;

    /**
     * @ORM\Column(type="string", length=250, unique=true)
     *
     * @Assert\NotBlank(message="settings_decimal.name.not_blank")
     * @Assert\Length(
     *      min=2,
     *      max=250,
     *      minMessage="settings_decimal.name.length.min",
     *      maxMessage="settings_decimal.name.length.max"
     * )
     */
    protected $name;

    /**
     * @ORM\Column(type="string", length=100, unique=true)
     *
     * @Assert\NotBlank(message="settings_decimal.key.not_blank")
     * @Assert\Length(
     *      min=2,
     *      max=100,
     *      minMessage="settings_decimal.key.length.min",
     *      maxMessage="settings_decimal.key.length.max"
     * )
     */
    protected $settingKey;

    /**
     * @ORM\Column(type="decimal", precision=10, scale=2)
     *
     * @CustomAssert\IsPriceConstraint
     */
    protected $settingValue;
}