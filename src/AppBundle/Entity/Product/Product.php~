<?php
// AppBundle/Entity/Product/Product.php
namespace AppBundle\Entity\Product;

use DateTime;

use Symfony\Component\Validator\Constraints as Assert,
    Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity,
    Symfony\Component\HttpFoundation\File\File;

use Doctrine\ORM\Mapping as ORM;

use Vich\UploaderBundle\Mapping\Annotation as Vich;

use AppBundle\Entity\Utility\Traits\DoctrineMapping\IdMapperTrait,
    AppBundle\Validator\Constraints as CustomAssert;

/**
 * @ORM\Table(name="products")
 * @ORM\Entity(repositoryClass="AppBundle\Entity\Product\Repository\ProductRepository")
 *
 * @UniqueEntity(fields="code", message="product.code.unique")
 *
 * @Vich\Uploadable
 */
class Product
{
    use IdMapperTrait;

    /**
     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\Product\ProductCategory", inversedBy="products")
     * @ORM\JoinColumn(name="product_category_id", referencedColumnName="id", nullable=true, onDelete="SET NULL")
     */
    protected $productCategory;

    /**
     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\Supplier\Supplier", inversedBy="products")
     * @ORM\JoinColumn(name="supplier_id", referencedColumnName="id", nullable=true, onDelete="SET NULL")
     */
    protected $supplier;

    /**
     * @ORM\ManyToMany(targetEntity="AppBundle\Entity\VendingMachine\VendingMachineGroup", mappedBy="products")
     */
    protected $vendingMachineGroups;

    /**
     * @ORM\Column(type="string", length=250)
     *
     * @Assert\NotBlank(message="product.name_full.not_blank")
     * @Assert\Length(
     *      min=2,
     *      max=250,
     *      minMessage="product.name_full.length.min",
     *      maxMessage="product.name_full.length.max"
     * )
     */
    protected $nameFull;

    /**
     * @ORM\Column(type="string", length=100)
     *
     * @Assert\NotBlank(message="product.name_short.not_blank")
     * @Assert\Length(
     *      min=2,
     *      max=100,
     *      minMessage="product.name_short.length.min",
     *      maxMessage="product.name_short.length.max"
     * )
     */
    protected $nameShort;

    /**
     * @ORM\Column(type="string", length=100, unique=true)
     *
     * @Assert\NotBlank(message="product.code.not_blank")
     * @Assert\Length(
     *      min=2,
     *      max=100,
     *      minMessage="product.code.length.min",
     *      maxMessage="product.code.length.max"
     * )
     */
    protected $code;

    /**
     * @ORM\Column(type="decimal", precision=10, scale=2)
     *
     * @CustomAssert\IsPriceConstraint
     */
    protected $price;

    /**
     * @Vich\UploadableField(mapping="product_image", fileNameProperty="imageProductName")
     */
    protected $imageProductFile;

    /**
     * @ORM\Column(type="string", length=250, nullable=true)
     */
    protected $imageProductName;

    /**
     * @Vich\UploadableField(mapping="product_certificate", fileNameProperty="imageCertificateName")
     */
    protected $imageCertificateFile;

    /**
     * @ORM\Column(type="string", length=250, nullable=true)
     */
    protected $imageCertificateName;

    /**
     * @ORM\Column(type="string", length=250, nullable=true)
     *
     * @Assert\Length(
     *      min=2,
     *      max=250,
     *      minMessage="product.manufacturer.length.min",
     *      maxMessage="product.manufacturer.length.max"
     * )
     */
    protected $manufacturer;

    /**
     * @ORM\Column(type="integer", nullable=true)
     *
     * @Assert\Range(
     *      min=1,
     *      max=1000,
     *      minMessage="product.calories.length.min",
     *      maxMessage="product.calories.length.max"
     * )
     */
    protected $calories;

    /**
     * @ORM\Column(type="string", length=200, nullable=true)
     *
     * @Assert\Length(
     *      min=2,
     *      max=200,
     *      minMessage="product.shelf_life.length.min",
     *      maxMessage="product.shelf_life.length.max"
     * )
     */
    protected $shelfLife;

    /**
     * @ORM\Column(type="integer", nullable=true)
     *
     * @Assert\Range(
     *      min=-100,
     *      max=100,
     *      minMessage="product.storage_temperature.length.min",
     *      maxMessage="product.storage_temperature.length.max"
     * )
     */
    protected $storageTemperature;

    /**
     * @ORM\Column(type="integer", nullable=true)
     *
     * @Assert\Range(
     *      min=1,
     *      max=10000,
     *      minMessage="product.weight.length.min",
     *      maxMessage="product.weight.length.max"
     * )
     */
    protected $weigth;

    /**
     * @ORM\Column(type="string", length=50, nullable=true)
     *
     * @Assert\Length(
     *      min=1,
     *      max=50,
     *      minMessage="product.measurement_unit.length.min",
     *      maxMessage="product.measurement_unit.length.max"
     * )
     */
    protected $measurementUnit;

    /**
     * @ORM\Column(type="integer", nullable=true)
     *
     * @Assert\Range(
     *      min=1,
     *      max=10000,
     *      minMessage="product.amount_in_box.length.min",
     *      maxMessage="product.amount_in_box.length.max"
     * )
     */
    protected $amountInBox;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $updatedAt;

    /* Vich Uploadable Methods */

    public function setImageProductFile(File $imageProduct = NULL)
    {
        $this->imageProductFile = $imageProduct;

        if( $imageProduct )
            $this->updatedAt = new DateTime('now');
    }

    public function getImageProductFile()
    {
        return $this->imageProductFile;
    }

    public function setImageCertificateFile(File $imageCertificate = NULL)
    {
        $this->imageCertificateFile = $imageCertificate;

        if( $imageCertificate )
            $this->updatedAt = new DateTime('now');
    }

    public function getImageCertificateFile()
    {
        return $this->imageCertificateFile;
    }

    /* End \ Vich Uploadable Methods */
}